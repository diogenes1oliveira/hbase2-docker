#!/usr/bin/env bash

set -euo pipefail
SCRIPT="$0"

usage() {
    cat <<eof
Map the TCP traffic on a local port to another local port or to a remote host

Usage:
    $SCRIPT [ -p PATH | -s] LISTEN_PORT:TARGET_PORT ...
    $SCRIPT [ -p PATH | -s] LISTEN_PORT:REMOTE_HOST:REMOTE_PORT ...

Options:
    LISTEN_PORT               port to listen locally
    TARGET_PORT               local port to forward the traffic to
    REMOTE_HOST:REMOTE_PORT   remote host:port to forward the traffic to
    -p, --pids-file=<PATH>    file to append the process PIDs to
    -s, --sudo                run the mapping process with 'sudo'
eof
}

LISTEN_PORT=
TARGET_HOST=
TARGET_PORT=
PIDS_FILE=
SUDO=

setup_mapping() {
    if [ "$TARGET_HOST" = 'localhost' ] && [ "$LISTEN_PORT" = "$TARGET_PORT" ]; then
        echo >&2 "INFO: listen port :$LISTEN_PORT is equal to local target port, nothing to map"
        return 0
    fi

    $SUDO socat -d "TCP-LISTEN:$LISTEN_PORT,fork" "TCP:$TARGET_HOST:$TARGET_PORT" &
    pid="$!"
    disown -h

    if [ -n "$PIDS_FILE" ]; then
        echo "$pid" >> "$PIDS_FILE"
    fi

    echo >&2 "INFO: mapping :$LISTEN_PORT to $TARGET_HOST:$TARGET_PORT (pid: $pid)"
}

parse_spec() {
    local spec="$1"

    if [[ "$spec" =~ ^([0-9]+):([0-9]+)$ ]]; then
        LISTEN_PORT="${BASH_REMATCH[1]}"
        TARGET_HOST=localhost
        TARGET_PORT="${BASH_REMATCH[2]}"
    elif [[ "$spec" =~ ^([0-9]+):([a-zA-Z0-9.-]+):([0-9]+)$ ]]; then
        LISTEN_PORT="${BASH_REMATCH[1]}"
        TARGET_HOST="${BASH_REMATCH[2]}"
        TARGET_PORT="${BASH_REMATCH[3]}"
    else
        echo >&2 "ERROR: invalid mapping spec '$spec'"
        return 1
    fi

    if [ "$TARGET_HOST" = '127.0.0.1' ]; then
        TARGET_HOST=localhost
    fi
}

# parse the command line
OPTS="$(getopt -l help,pids-file:,sudo -o hp:s -n "$SCRIPT" -- "$@")"
eval set -- "$OPTS"

while true; do
    case "${1:-}" in
    -h | --help)
        usage
        exit 0;;
    -p | --pids-file)
        PIDS_FILE="${2:-}"
        if [ -z "$PIDS_FILE" ]; then
            echo >&2 "ERROR: no PID file specified"
            exit 1
        fi
        shift 2;;
    -s | --sudo)
        SUDO=sudo
        shift;;
    --)
        shift
        break;;
    esac
done

if [ "$#" -lt 1 ]; then
    echo >&2 "WARN: no ports to map"
    exit 0
fi

# before starting anything, check if all mappings are valid
for arg; do
    parse_spec "$arg"
done

for spec; do
    parse_spec "$spec"
    setup_mapping
done
