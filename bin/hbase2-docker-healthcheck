#!/usr/bin/env bash

set -euo pipefail
SCRIPT="$0"

usage() {
    cat <<eof
Checks the health of all the container processes

Usage:
    $SCRIPT [ MODE ]

Options:
    MODE    shell or http (default: shell)
            The shell mode prints a human-friendly output to the stdout and
                exits with status 1 if unhealthy.
            The http mode prints to the stdout in the form of HTTP/1.1 data with
                HTTP 200 for healthy and HTTP 503 for unhealthy, always exiting with status 0.
eof
}

OUTPUT=''
ERROR=
MODE=shell

main() {
    if [ "${HBASE_MANAGES_ZK:-}" = 'true' ]; then
        check_zookeeper_port
    fi

    if [ "${HBASE_SITE_hbase_cluster_distributed:-}" = 'false' ]; then
        check_master_port
        check_regionserver_port
    fi

    check_background_pids

    if [ -n "${HBASE_HEALTHCHECK_EXPECTED_STATUS:-}" ]; then
        if [ -z "$ERROR" ]; then
            check_hbase_status
        else
            echo >&2 'INFO: skipped status check, healthcheck already failed'
        fi
    fi

    case "$MODE" in
    shell )
        print_shell ;;
    html )
        print_html ;;
    esac
}

print_shell() {
    printf '%s' "$OUTPUT"
    [ -z "$ERROR" ]
}

print_html() {
    if [ -z "$ERROR" ]; then
        printf '%s\r\n' 'HTTP/1.1 200 OK'
    else
        printf '%s\r\n' 'HTTP/1.1 503 Service Unavailable'
    fi

    printf '%s\r\n' 'Content-Type: text/plain; charset=UTF-8'
    printf '%s\r\n' "Content-Length: ${#OUTPUT}"
    printf '%s\r\n' ''

    printf '%s' "$OUTPUT"
}

add_output() {
    OUTPUT+="$1"
    OUTPUT+=$'\n'
}

set_down() {
    ERROR=yes
}

check_background_pids() {
    local return_code=0

    if [ -e "${HBASE_BACKGROUND_PIDS_FILE:-}" ]; then
        for pid in $(cat $HBASE_BACKGROUND_PIDS_FILE); do
            if kill -0 "$pid"; then
                echo "pid($pid): UP"
            else
                echo "pid($pid): DOWN"
                set_down
            fi
        done
    fi

}

check_zookeeper_port() {
    if nc -z localhost "${HBASE_SITE_hbase_zookeeper_property_clientPort:-}"; then
        add_output "zookeeper(${HBASE_SITE_hbase_zookeeper_property_clientPort:-}): UP"
    else
        add_output "zookeeper(${HBASE_SITE_hbase_zookeeper_property_clientPort:-}): DOWN"
        set_down
    fi
}

check_master_port() {
    if nc -z localhost "${HBASE_SITE_hbase_master_port:-}"; then
        add_output "master(${HBASE_SITE_hbase_master_port:-}): UP"
    else
        add_output "master(${HBASE_SITE_hbase_master_port:-}): DOWN"
        set_down
    fi
}

check_regionserver_port() {
    if nc -z localhost "${HBASE_SITE_hbase_regionserver_port:-}"; then
        add_output "regionserver(${HBASE_SITE_hbase_regionserver_port:-}): UP"
    else
        add_output "regionserver(${HBASE_SITE_hbase_regionserver_port:-}): DOWN"
        set_down
    fi
}

check_hbase_status() {
    if ! output="$(echo 'status' | hbase shell -n)"; then
        add_output 'hbase: DOWN'
        set_down
        return
    fi

    if ! grep -q "${HBASE_HEALTHCHECK_EXPECTED_STATUS:-}" <<<"$output"; then
        printf '%s\n' "$output" >&2
        add_output 'hbase(status): DOWN'
        set_down
    else
        add_output 'hbase(status): UP'
    fi
}

for arg in "$@"; do
    case "$arg" in
    -h | --help )
        usage && exit 0 ;;
    esac
done

if [ "$#" -ge 1 ]; then
    MODE="$1"
fi

if ! [[ "$MODE" =~ ^shell|html$ ]]; then
    echo >&2 "ERROR: unrecognized mode '$MODE'"
fi

main
